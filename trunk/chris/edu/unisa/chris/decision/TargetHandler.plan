/* ********************************************************************* *
 *                                                                       *
 *   =============================================================       *
 *   Copyright 2002-2010,                                                *
 *   Christos Sioutis <christos.sioutis@gmail.com>                       *
 *   =============================================================       *
 *   This software was developed during my PhD studies at:               *
 *                                                                       *
 *   Knowledge Based Intelligent Engineering Systems Centre (KES)        *
 *   School of Electrical and Information Engineering                    *
 *   University of South Australia                                       *
 *   =============================================================       *
 *                                                                       *
 *   This file is part of CHRIS.                                         *
 *                                                                       *
 *   CHRIS is free software: you can redistribute it and/or              *
 *   modify it under the terms of the GNU Lesser General Public Licence  *
 *   as published by the Free Software Foundation, either version 3 of   *
 *   the License, or (at your option) any later version.                 *
 *                                                                       *
 *   CHRIS is distributed in the hope that it will be useful,            *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of      *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
 *   GNU Lesser General Public License for more details.                 *
 *                                                                       *
 *   You should have received a copy of the GNU Lesser General Public    *
 *   License along with CHRIS.                                           *
 *   If not, see <http://www.gnu.org/licenses/>.                         *
 *                                                                       *
 * ********************************************************************* */



/*
 * Activation.java
 *
 * Created on September 22, 2004, 3:37 PM
 */

package edu.unisa.chris.decision;
import java.util.*;
import edu.unisa.chris.kernel.*;
import edu.unisa.chris.agent.*;
import edu.unisa.chris.orientation.*;
import aos.jack.util.cursor.Change;
/**
 * This plan posts Alert events for each of the data objects produced by the Activation class1
 * @author  Christos Sioutis
 */
public plan TargetHandler extends Plan{
        #handles event Goal goal;
        #uses data Goals goals;
        #uses interface CHRISFunctions chris;

        #posts event Target target;

	body(){
            try{
                //update the Goals beliefset to indicate that this goal is now active
                GoalInfo info = goals.getGoalInfo(goal.name,goal.parent);
                goals.add(info.name,info.parent,info.type,true,info.priority,info.successCount,info.failureCount,info.proceduralIndex);
                chris.logInfo("CHRIS: Decision: TargetHandler: Activated: "+goal.name,chris.LOG_DECISION,true);                
                @subtask(target.target(goal.name,goal.parent,goal.state));
                chris.logInfo("CHRIS: Decision: TargetHandler: Target Succeeded: "+goal.name,chris.LOG_DECISION,true);
                goals.add(info.name,info.parent,info.type,false,info.priority,info.successCount+1,info.failureCount,info.proceduralIndex);
            }
            catch (MaintenanceViolation e){
                chris.logInfo("CHRIS: Decision: TargetHandler: Maintainance Violation, Target Finished: "+goal.name,chris.LOG_DECISION,true);
                GoalInfo info = goals.getGoalInfo(goal.name,goal.parent);
                goals.add(info.name,info.parent,info.type,false,info.priority,info.successCount,info.failureCount,info.proceduralIndex);
                throw e;
            }
	}

        #reasoning method fail(){
            chris.logInfo("CHRIS: Decision: TargetHandler: Target Failed: "+goal.name,chris.LOG_DECISION,true);
            GoalInfo info = goals.getGoalInfo(goal.name,goal.parent);
            goals.add(info.name,info.parent,info.type,false,info.priority,info.successCount,info.failureCount+1,info.proceduralIndex);
        }

}
