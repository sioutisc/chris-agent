/* ********************************************************************* *
 *                                                                       *
 *   =============================================================       *
 *   Copyright 2002-2010,                                                *
 *   Christos Sioutis <christos.sioutis@gmail.com>                       *
 *   =============================================================       *
 *   This software was developed during my PhD studies at:               *
 *                                                                       *
 *   Knowledge Based Intelligent Engineering Systems Centre (KES)        *
 *   School of Electrical and Information Engineering                    *
 *   University of South Australia                                       *
 *   =============================================================       *
 *                                                                       *
 *   This file is part of CHRIS.                                         *
 *                                                                       *
 *   CHRIS is free software: you can redistribute it and/or              *
 *   modify it under the terms of the GNU Lesser General Public Licence  *
 *   as published by the Free Software Foundation, either version 3 of   *
 *   the License, or (at your option) any later version.                 *
 *                                                                       *
 *   CHRIS is distributed in the hope that it will be useful,            *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of      *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
 *   GNU Lesser General Public License for more details.                 *
 *                                                                       *
 *   You should have received a copy of the GNU Lesser General Public    *
 *   License along with CHRIS.                                           *
 *   If not, see <http://www.gnu.org/licenses/>.                         *
 *                                                                       *
 * ********************************************************************* */



/*
 * Activation.java
 *
 * Created on September 22, 2004, 3:37 PM
 */

package edu.unisa.chris.decision;
import java.util.*;
import edu.unisa.chris.kernel.*;
import edu.unisa.chris.agent.*;
import edu.unisa.chris.orientation.*;
import aos.jack.util.cursor.Change;
/**
 * This plan should only succeed if all subgoals successively succeed
 * @author  Christos Sioutis
 */
public plan ExecuteIfElseSubGoalsPlan extends Plan{
        #handles event ExecuteSubGoalsEvent ev;
        #posts event Goal goal;

        #uses data Goals goals;
        #uses interface CHRISFunctions chris;

       static boolean relevant (ExecuteSubGoalsEvent ev){
            if(ev.type == CHRISConstants.SUBGOAL_IFELSE)
                return true;
            return false;
       }

	body(){
            chris.logInfo("CHRIS: Decision: ExecuteIfElseSubGoalsPlan: For "+ev.goal,chris.LOG_DECISION,true);
            List ifElseGoals = goals.getSubGoals(ev.goal,chris.SUBGOAL_IFELSE);
            boolean success = false;
            for(int i=0; success==false && i<ifElseGoals.size()-1; i++){
                GoalInfo info = (GoalInfo) ifElseGoals.get(i);
                chris.logInfo("CHRIS: Decision: ExecuteIfElseSubGoalsPlan: Trying IF "+info.name,chris.LOG_DECISION,true);

                @post(goal.goal(info.name,info.parent));

                //this is to make sure the goal is activated before going to the next line
                @wait_for(new GoalActiveCursor(goals,info.name,info.parent,true));
                //wait for the selected goal to finish
                @wait_for(new GoalFinishedCursor(goals,info.name,info.parent,true));

                //re-capture goal info from goals beliefset
                GoalInfo newInfo = (GoalInfo) goals.getGoalInfo(info.name,info.parent);

                if(newInfo.successCount > info.successCount)
                    success = true;
            }

            //try the last one but this time fail the plan if the subtask fails
            if(success==false){
                GoalInfo info = (GoalInfo) ifElseGoals.get(ifElseGoals.size()-1);
                chris.logInfo("CHRIS: Decision: ExecuteIfElseSubGoalsPlan: Trying ELSE "+info.name,chris.LOG_DECISION,true);
                @subtask(goal.goal(info.name,info.parent));
            }
            chris.logInfo("CHRIS: Decision: ExecuteIfElseSubGoalsPlan: Finished "+ev.goal,chris.LOG_DECISION,true);
	}

        #reasoning method fail(){
            chris.logInfo("CHRIS: Decision: ExecuteIfElseSubGoalsPlan: Failed "+ev.goal,chris.LOG_DECISION,true);
        }
}