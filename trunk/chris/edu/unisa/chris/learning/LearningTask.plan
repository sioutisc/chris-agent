/* ********************************************************************* *
 *                                                                       *
 *   =============================================================       *
 *   Copyright 2002-2010,                                                *
 *   Christos Sioutis <christos.sioutis@gmail.com>                       *
 *   =============================================================       *
 *   This software was developed during my PhD studies at:               *
 *                                                                       *
 *   Knowledge Based Intelligent Engineering Systems Centre (KES)        *
 *   School of Electrical and Information Engineering                    *
 *   University of South Australia                                       *
 *   =============================================================       *
 *                                                                       *
 *   This file is part of CHRIS.                                         *
 *                                                                       *
 *   CHRIS is free software: you can redistribute it and/or              *
 *   modify it under the terms of the GNU Lesser General Public Licence  *
 *   as published by the Free Software Foundation, either version 3 of   *
 *   the License, or (at your option) any later version.                 *
 *                                                                       *
 *   CHRIS is distributed in the hope that it will be useful,            *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of      *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
 *   GNU Lesser General Public License for more details.                 *
 *                                                                       *
 *   You should have received a copy of the GNU Lesser General Public    *
 *   License along with CHRIS.                                           *
 *   If not, see <http://www.gnu.org/licenses/>.                         *
 *                                                                       *
 * ********************************************************************* */



/*
 * QLearning.java
 *
 * Created on October 7, 2004, 8:10 PM
 */

package edu.unisa.chris.learning;
import edu.unisa.chris.learning.perception.*;
import edu.unisa.chris.action.*;
import edu.unisa.chris.orientation.*;
import edu.unisa.chris.decision.*;
import edu.unisa.chris.agent.*;
import aos.jack.util.cursor.Change;

/**
 *
 * @author  Christos Sioutis
 */
public plan LearningTask extends Plan {
    #handles event Target target;
    #posts event Learn learn;
    #posts event Target passiveTarget;
    #uses data LearningGoals learningGoals; 
    #uses data Scheduler scheduler;
    #uses data Goals goals;
    #uses data CurrentStateInstance currentStateInstance;
    #uses interface CHRISFunctions chris;

    logical LearningGoal learningGoal;
    context(){
        learningGoals.get(target.name,learningGoal);
    }
    
    body(){
        try{
            chris.logInfo("CHRIS: Activating Learning: for "+target.name,chris.LOG_LEARNING,true);
            //cannot start learning without an initial environment perception
            while(currentStateInstance.getCurrentStateInstance() == null)
                @wait_for(new Change(currentStateInstance,true));

            //LearningGoal goal = (LearningGoal) learningGoals.getLearningGoal(target.name);
            LearningGoal goal = (LearningGoal) learningGoal.as_object();

            StateInstance current = currentStateInstance.getCurrentStateInstance();

            scheduler.add(target.name,goals.getPriority(target.name,target.parent));

            if(goal.learning == chris.LEARNING_ACTIVE)
                @subtask(learn.learn(target.name,goal));
            else{
                @post(learn.learn(target.name,goal));
                @subtask(passiveTarget.target(goal.passiveTarget,target.name,current));
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }
    }
}
