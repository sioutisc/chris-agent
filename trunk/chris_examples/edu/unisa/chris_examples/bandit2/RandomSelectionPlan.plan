/* ********************************************************************* *
 *                                                                       *
 *   =============================================================       *
 *   Copyright 2002-2010,                                                *
 *   Christos Sioutis <christos.sioutis@gmail.com>                       *
 *   =============================================================       *
 *   This software was developed during my PhD studies at:               *
 *                                                                       *
 *   Knowledge Based Intelligent Engineering Systems Centre (KES)        *
 *   School of Electrical and Information Engineering                    *
 *   University of South Australia                                       *
 *   =============================================================       *
 *                                                                       *
 *   This file is part of CHRIS.                                         *
 *                                                                       *
 *   CHRIS is free software: you can redistribute it and/or              *
 *   modify it under the terms of the GNU Lesser General Public Licence  *
 *   as published by the Free Software Foundation, either version 3 of   *
 *   the License, or (at your option) any later version.                 *
 *                                                                       *
 *   CHRIS is distributed in the hope that it will be useful,            *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of      *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
 *   GNU Lesser General Public License for more details.                 *
 *                                                                       *
 *   You should have received a copy of the GNU Lesser General Public    *
 *   License along with CHRIS.                                           *
 *   If not, see <http://www.gnu.org/licenses/>.                         *
 *                                                                       *
 * ********************************************************************* */



/*
 * Activation.java
 *
 * Created on September 22, 2004, 3:37 PM
 */

package edu.unisa.chris_examples.bandit2;
import edu.unisa.chris.learning.*;
import edu.unisa.chris.decision.*;
import edu.unisa.chris.agent.*;
import edu.unisa.chris.action.*;
import edu.unisa.chris.orientation.*;
import java.util.*;
import aos.jack.util.cursor.Change;
/**
 * This plan posts Alert events for each of the data objects produced by the Activation class
 * @author  Christos Sioutis
 */
public plan RandomSelectionPlan extends Plan{
        #handles event Target ev;
        #uses interface BanditChoice bandit;
        #uses data LearningGoals learningGoals;
        #uses data Scheduler scheduler;
        #uses data CurrentStateInstance currentStateInstance;
        #uses data SelectedAction selectedAction;
        #uses interface CHRISFunctions chris;

        #posts event ActionEvent action;

        public boolean relevant(Target ev){
            return ev.name.equals("RandomSelection");
        }
	
	body(){
            List actions;
            int choice = -1;
            LearningGoal learningGoal = learningGoals.getLearningGoal(ev.parent);

            while(scheduler.getActiveTarget()!=null && ev.parent.equals(scheduler.getActiveTarget())){
                //execute the selected action - only if it is a valid choice
                if(choice != -1)
                    @subtask(action.takeAction(new BanditAction(choice)));
                    
                //get the available actions
                actions = chris.getActionsAvailable(currentStateInstance.getCurrentStateInstance());

                //choose randomly from the available actions
                choice = chris.uniformRandom(actions.size());

                //tell the learning which action was chosen
                selectedAction.add(learningGoal.name,(Action)actions.get(choice));

                //wait for learning to take the selected action before continuing execution
                while(selectedAction.get(learningGoal.name) != null)
                    @wait_for(new Change(selectedAction,false));
            }
	}
}
